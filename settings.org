* Packages
There are many third party packages/libraries available for free on the web that
enhance emacs functionality. The package *el-get* is a package that helps us
manage the installation and configuration of other packages.

We instruct the *el-get* package that the libraries we tell it to install will be
kept in the *el-get* directory.

The instructions we give *el-get* about the packages we want installed can be
defined through the use of the lisp macro *el-get-bundle*. This macro takes
as it's first argument the name of the package, and then a series of key/value
pairs that allow further customization.

In the following subsections various package installation instructions are defined
for el-get, ordered by the package type.

** Misc
*** Dash
#+BEGIN_SRC emacs-lisp
(el-get-bundle dash 
  :type github
  :pkgname "magnars/dash.el"
  )
#+END_SRC

** Major modes
*** Scss
#+BEGIN_SRC emacs-lisp
(el-get-bundle scss-mode
  :type github
  :pkgname "antonj/scss-mode"
  :after
  (progn
    (add-hook 'css-mode-hook (lambda () (setq css-indent-offset 2)))
    )
  )
#+END_SRC
    

** Minor modes
*** Evil
Emulates the vim's text editor "insert" and "view" mode for editing text
#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
(el-get-bundle evil
  (evil-mode 1))
#+END_SRC

*** Magit
Git version control functionality.

#+BEGIN_SRC emacs-lisp
(el-get-bundle magit
  :type github
  :pkgname "magit/magit"
  )
#+END_SRC

*** Yasnippet
Yasnippet is a package that allows to define some keywords and after typing them
inside a buffer and hitting a key sequence (defaulting to TAB), replaces the
keyword with a specified text.

#+BEGIN_SRC emacs-lisp
(el-get-bundle yasnippet
  :type github
  :pkgname "capitaomorte/yasnippet"
  :prepare
  (progn
    (yas-global-mode 1)
    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "C-j") 'yas-expand)
    )
  )
#+END_SRC

*** Org Bullets
Styles org-mode's heading symbols better.

#+BEGIN_SRC emacs-lisp
(el-get-bundle org-bullets
  :type github
  :pkgname "sabof/org-bullets"
  :prepare
  (progn
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
  )
#+END_SRC

*** Powerline
Emulates the vim's editor powerline.

#+BEGIN_SRC emacs-lisp
(el-get-bundle powerline
  :type github
  :pkgname "milkypostman/powerline"
  :after
  (progn
    (powerline-default-theme)
    )
  )
#+END_SRC

** Themes
*** Zenburn
#+BEGIN_SRC emacs-lisp
(el-get-bundle color-theme-zenburn
  :description "The Zenburn colour theme ported to Emacs"
  :website "https://github.com/bbatsov/zenburn-emacs"
  :minimum-emacs-version "24"
  :type github
  :pkgname "bbatsov/zenburn-emacs"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    ))
#+END_SRC

*** Evenhold
#+BEGIN_SRC emacs-lisp
(el-get-bundle color-theme-evenhold
  :description "The Zenburn colour theme ported to Emacs"
  :website "https://github.com/evenhold/evenhold-theme"
  :minimum-emacs-version "24"
  :type github
  :pkgname "evenhold/evenhold-theme"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    ))
#+END_SRC

*** Darcula
#+BEGIN_SRC emacs-lisp
(el-get-bundle color-theme-darcula
  :website "https://github.com/fommil/darcula-theme-emacs"
  :minimum-emacs-version "24"
  :type github
  :pkgname "fommil/darcula-theme-emacs"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    ))
#+END_SRC

*** Soothe
#+BEGIN_SRC emacs-lisp
(el-get-bundle color-theme-soothe
  :website "https://github.com/emacsfodder/emacs-soothe-theme"
  :minimum-emacs-version "24"
  :type github
  :pkgname "emacsfodder/emacs-soothe-theme"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    ))
#+END_SRC

*** Cherry blossom
#+BEGIN_SRC emacs-lisp
(el-get-bundle color-theme-cherry-blossom
  :website "https://github.com/inlinestyle/emacs-cherry-blossom-theme"
  :minimum-emacs-version "24"
  :type github
  :pkgname "inlinestyle/emacs-cherry-blossom-theme"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    ))
#+END_SRC

*** Dark Krystal
#+BEGIN_SRC emacs-lisp
(el-get-bundle color-dark-krystal
  :website "https://github.com/emacsfodder/emacs-dark-krystal-theme"
  :minimum-emacs-version "24"
  :type github
  :pkgname "emacsfodder/emacs-dark-krystal-theme"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    ))
#+END_SRC

*** Solarized
#+BEGIN_SRC emacs-lisp
(el-get-bundle emacs-color-theme-solarized
  :website "https://github.com/sellout/emacs-color-theme-solarized"
  :minimum-emacs-version "24"
  :type github
  :pkgname "sellout/emacs-color-theme-solarized"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    (set-frame-parameter nil 'background-mode 'dark)
    )
  :post-init
  (progn
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (set-frame-parameter frame 'background-mode 'dark)
                (enable-theme 'solarized)))
    )
  )
#+END_SRC

*** Gotham
#+BEGIN_SRC emacs-lisp
(el-get-bundle gotham-theme
  :website "https://github.com/wasamasa/gotham-theme"
  :minimum-emacs-version "24"
  :type github
  :pkgname "wasamasa/gotham-theme"
  :prepare
  (progn
    (add-to-list 'custom-theme-load-path default-directory)
    )
  )
#+END_SRC

* Appearance
** Dimensions
#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(alpha 95 50))
(add-to-list 'default-frame-alist '(alpha 95 50))

(eval-when-compile (require 'cl))
(defun toggle-transparency ()
  (interactive)
  (if (/=
       (cadr (frame-parameter nil 'alpha))
       100)
      (set-frame-parameter nil 'alpha '(100 100))
    (set-frame-parameter nil 'alpha '(85 50))))
(global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC

** Selected Color Theme
#+BEGIN_SRC emacs-lisp
(load-theme 'solarized)
#+END_SRC

** Ruler
#+BEGIN_SRC emacs-lisp
(add-hook 'window-configuration-change-hook (lambda () (ruler-mode 1)))
#+END_SRC

* Configuration
** Interactively Do Things
Use completion prompts for most stuff

#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
#+END_SRC

** Extend HTML mode syntax highlighter
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords
 'html-mode
 '(("{%" . font-lock-keyword-face)
   ("%}" . font-lock-keyword-face)
   ("{{" . font-lock-keyword-face)
   ("}}" . font-lock-keyword-face)
   ("{$" . font-lock-keyword-face)
   ("$}" . font-lock-keyword-face)
   ))

(font-lock-add-keywords
 'js-mode
 '(("\\(self\\)\\." 1 font-lock-constant-face)
   ))
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
;; We define a function that permits us to define header arguments for blocks
(defun set-org-system-header-arg (property value)
  "Easily set system header arguments in org mode.
        PROPERTY is the system-wide value that you would like to modify.
        VALUE is the new value you wish to store.
        Attribution: URL http://orgmode.org/manual/System_002dwide-header-arguments.html#System_002dwide-header-arguments
        "
  (setq org-babel-default-header-args
        (cons (cons property value)
              (assq-delete-all property org-babel-default-header-args))))

(setq org-startup-indented t         ;; Indentation of headings
      org-ellipsis " \u25bc"         ;; Folded heading marking is now a downward triangle
      org-src-fontify-natively t     ;; Source blocks fontified as if in language mode
      org-src-tab-acts-natively t    ;; Can tab inside block as if in language mode
      org-list-allow-alphabetical t  ;; Lists can have letter bullets (a., b., etc.)
      org-src-preserve-indentation t
      org-babel-use-quick-and-dirty-noweb-expansion t
      ;; org-export-with-toc nil        ;; No table of contents by default
      )

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

;; Allow evaluation of some languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (shell . t)
   (python . t)
   (R . t)
   (ruby . t)
   (perl . t)
   ))


(add-to-list 'org-src-lang-modes '("txt" . fundamental) t)

;; Define some global block arguments to save some typing
(set-org-system-header-arg :noweb "yes")         ;; All blocks can be noweb-ed
(set-org-system-header-arg :noweb-sep "\n\n\n")  ;; Tangled file separation of blocks
(set-org-system-header-arg :padline "no")  ;; Tangled file separation of blocks
(set-org-system-header-arg :results "none")

;; '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"

;; Use pdflatex instead of xelatex since it seems to work better with utf-8
;; (setq org-latex-pdf-process
;;       '("pdflatex -shell-escape -interaction nonstopmode -output-directory -bibtex %o %f"
;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory -bibtex %o %f"
;;         "pdflatex -shell-escape -interaction nonstopmode -output-directory -bibtex %o %f"))

;; Exported source blocks have syntax coloring
(setq org-latex-listings 'minted)
(setq org-latex-minted-options
      '(
        ("fontsize" "\\footnotesize")
        ("fontfamily" "courier")
        ("mathescape" "")
        ("linenos" "")
        ("xrightmargin" "0.5cm")
        ("xleftmargin"  "0.5cm")
        ("style" "friendly")
        ("outencoding" "utf8")
        ("breaklines" "")
        ("breakautoindent" "false")
        ("breaksymbolleft" "\\raisebox{0.8ex}{\\smal\\reflectbox{\\carriagereturn}}")
        ("breaksymbolindentleft" "0pt")
        ("breaksymbolsepleft" "0pt")
        ("breaksymbolright" "\\small\\carriagereturn")
        ("breaksymbolindentright" "0pt")
        ("breaksymbolsepright" "0pt")
        ("samepage" "false")
        ))

;; Functionality for taking a screenshot and inserting it in the org document
(defun my-org-screenshot-filenamer ()
  "Make folder if not exist, define image name based on time/date" 
  (setq myvar/img-folder-path (concat default-directory "img/"))

                                        ; Make img folder if it doesn't exist.
  (if (not (file-exists-p myvar/img-folder-path)) ;[ ] refactor thir and screenshot code.
      (mkdir myvar/img-folder-path))

  (setq myvar/img-name (concat "img_" (format-time-string "%Y_%m_%d__%H_%M_%S") ".png"))
  (setq myvar/img-Abs-Path (concat myvar/img-folder-path myvar/img-name)) ;Relative to workspace.

  (setq myvar/relative-filename (concat "./img/" myvar/img-name))
  )

(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
    same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename (my-org-screenshot-filenamer))
  (call-process "screencapture" nil nil nil "-i" filename)
  (insert (concat "[[" filename "]]")))

(defun mp-add-org-keys ()
  (local-set-key (kbd "M-s M-c") 'my-org-screenshot)
  (local-set-key (kbd "M-s M-s") 'org-babel-pop-to-session))

(add-hook 'org-mode-hook 'mp-add-org-keys)

(require 'ox-latex)
(require 'ox-bibtex)
#+END_SRC

*** Tecnologico de Monterrey Assignment Preamble
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-classes
	     '("tecmty"
	       "\\documentclass[a4paper,11pt]{article}

\\usepackage[utf8]{inputenc}
\\usepackage{lmodern}
\\usepackage[T1]{fontenc}
\\usepackage{textcomp}
\\usepackage[natbiapa]{apacite}
\\usepackage{amssymb}
\\usepackage{amsmath}
\\usepackage{siunitx}

% Images
\\usepackage{xcolor}
\\usepackage[pdftex]{graphicx}

\\pdfimageresolution=96

% Source code coloring
\\usepackage{minted}

% Nice headers/footers
%\\usepackage{fancyhdr}
%\\setlength{\\headheight}{15.2pt}
%\\pagestyle{fancy}

[NO-DEFAULT-PACKAGES]
[NO-PACKAGES]
[EXTRA]

% Better links
\\usepackage[pdftex,colorlinks]{hyperref}
"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

* Custom Functions
** other-window-backward
#+BEGIN_SRC emacs-lisp
(defun other-window-backward (&optional n)
  "Select the Nth previous window"
  (interactive "P")
  (other-window (- (prefix-numeric-value n))))
#+END_SRC

** set-frame-pixel-size
#+BEGIN_SRC emacs-lisp
;; Resize to use half the screen
(defun set-frame-pixel-size (frame width height)
  "Sets size of FRAME to WIDTH by HEIGHT, measured in pixels."
  (let ((pixels-per-char-width (/ (frame-pixel-width) (frame-width)))
        (pixels-per-char-height (/ (frame-pixel-height) (frame-height))))
    (set-frame-size frame
                    (floor (/ width pixels-per-char-width))
                    (floor (/ height pixels-per-char-height)))))

#+END_SRC

** string-ends-with-p
#+BEGIN_SRC emacs-lisp
(defun string-ends-with-p (string suffix)
  "Return t if STRING ends with SUFFIX."
  (and (string-match (rx-to-string `(: ,suffix eos) t)
                     string)
       t))
#+END_SRC

** use-left-half-screen
#+BEGIN_SRC emacs-lisp
(defun use-left-half-screen ()
  (interactive)
  (let* ((excess-width 32)
         (excess-height 48)
         (half-screen-width (- (/ (x-display-pixel-width) 2) excess-width))
         (screen-height (- (x-display-pixel-height) excess-height)))
    (set-frame-pixel-size (selected-frame) half-screen-width screen-height)))
#+END_SRC

** align-regexp-=
#+BEGIN_SRC emacs-lisp
(defun align-regexp-= (p1 p2)
  "Align lines by =" 
  (interactive "r")
  (align-regexp p1 p2 "\\(\\s-*\\)=" 1 1 nil)
  )

#+END_SRC

** align-regexp-:
#+BEGIN_SRC emacs-lisp
(defun align-regexp-: (p1 p2)
  "Align lines by :" 
  (interactive "r")
  (align-regexp p1 p2 "\\(\\s-*\\):" 1 1 nil)
  )
#+END_SRC

* Keys
#+BEGIN_SRC emacs-lisp
(global-set-key "\M-?" 'help-command)
(global-set-key "\C-h" 'delete-backward-char)
(global-set-key "\C-x\C-n" 'other-window)
(global-set-key "\C-x\C-p" 'other-window-backward)
(global-set-key "\C-xj" 'delete-indentation)
(global-set-key (kbd "C-x C-=") 'align-regexp-=)
(global-set-key (kbd "C-x C-:") 'align-regexp-:)
#+END_SRC

* Quality of life
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode nil)
(tool-bar-mode nil)

(setq inhibit-startup-screen t)
(setq inhibit-splash-screen t)

(put 'eval-expression 'disabled nil)

(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)
#+END_SRC

* Text Editing
#+BEGIN_SRC emacs-lisp
(set-default 'truncate-lines t)  ;; Text shouldn't wrap around line
(setq-default indent-tabs-mode nil)
(show-paren-mode t)
(setq shell-command-switch "-ic")
#+END_SRC
